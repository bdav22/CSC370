import java.util.Arrays;
import java.util.Collections;

public class Dirsort {

	// method to sort
	public static void sort(int[] a) {

	}

	public static String[] sort(String[] dirs) {

		// variable initializations
		int[] slashCount = {};
		int slashOrder = 0;
		int a = 0;
		String[] AlreadySorted = {};
		String temp;

		// loop through string and have a "slash" counter
		for (int i = 0; i < dirs.length; i++) {

			// reset slashCount to 0 for each element of dirs
			 slashCount[i] = 0;

			// loop through a specific element in dirs
			for (int j = 0; j < dirs[i].length(); j++) {

				// if there is a slash
				if (dirs[i].charAt(j) == '/') {

					// increment slashCount at i
					slashCount[i]++;

				}

				// increase the value of slashOrder if needed
				if (slashCount[i] >= slashOrder) {

					// update slashOrder
					slashOrder = slashCount[i];

				}

			}

		}

		// loop through slashOrder and sort based on number of slashes
		for (int i = 0; i < slashOrder; i++) {

			for (int j = 0; j < dirs.length; j++) {

				if (slashCount[j] == i) {

					// change AlreadySorted at a
					AlreadySorted[a] = dirs[j];

					// increment a
					a++;

				}

			}

		}

		// number of slashes are re-found after sorting; need to do this to now sort by
		// alphabet
		for (int i = 0; i < AlreadySorted.length; i++) {

			slashCount[i] = 0;

			// loop through the individual element in the AlreadySorted array
			for (int j = 0; j < AlreadySorted[i].length(); j++) {

				// if there is a slash
				if (AlreadySorted[i].charAt(j) == '/') {

					// increment slashCount at i
					slashCount[i]++;

				}

			}

		}

		// loop through most slashes
		for (int i = 0; i < slashOrder; i++) {

			// loop through the AlreadySorted array
			for (int j = 0; j < (AlreadySorted.length - 1); j++) {

				if (slashCount[j] == i && slashCount[j + 1] == j) {

					// sorting algorithm
					if (AlreadySorted[j].compareTo(AlreadySorted[j + 1]) > 0) {

						// swap
						temp = AlreadySorted[j];
						AlreadySorted[j] = AlreadySorted[j + 1];
						AlreadySorted[j + 1] = temp;

						j = 0;

					} // most inside if

				}

			}

		}

		return AlreadySorted;

	}

	public static void main(String[] args) {

		// String arr[] = {
		// "{\"/\",\"/usr/\",\"/usr/local/\",\"/usr/local/bin/\",\"/games/\",\"/ga\r\n"
		// + "mes/snake/\",\"/homework/\",\"/temp/downloads/\"" };

// Sorts arr[] in ascending order
//Arrays.sort(arr);
//System.out.printf("Modified arr[] : \n%s\n\n",
		// Arrays.toString(arr));

	}

}